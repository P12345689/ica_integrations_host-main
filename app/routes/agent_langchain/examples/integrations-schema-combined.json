{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Integrations and Langchain Response Schema",
  "description": "Schema for validating response objects from Integrations and Langchain when streaming events as agents or providing non-streaming responses.",
  "type": "object",
  "properties": {
    "status": {
      "type": "string",
      "enum": [
        "success",
        "error"
      ],
      "description": "The status of the response. Should always be 'success' or 'error'."
    },
    "invocation_id": {
      "type": "string",
      "format": "uuid",
      "description": "A unique identifier for the invocation, formatted as a UUID."
    },
    "event_id": {
      "type": "integer",
      "minimum": 0,
      "description": "The event ID, should be a non-negative integer, starting from 0. Required for streaming responses."
    },
    "is_final_event": {
      "type": "boolean",
      "description": "Indicates whether this is the final event in the sequence. Required for streaming responses."
    },
    "response": {
      "type": "array",
      "description": "A list of response objects containing message and type.",
      "items": {
        "type": "object",
        "properties": {
          "message": {
            "type": "object",
            "description": "The message object containing details of the response.",
            "properties": {
              "agent_name": {
                "type": "string",
                "description": "Name of the agent providing the response. Required for streaming responses."
              },
              "thought": {
                "type": "string",
                "description": "Agent's thought process or reasoning.",
                "minLength": 1,
                "maxLength": 1000
              },
              "action": {
                "type": "string",
                "description": "Action taken by the agent.",
                "minLength": 1,
                "maxLength": 255
              },
              "tool_input": {
                "type": "string",
                "description": "Input provided to the tool by the agent.",
                "minLength": 1,
                "maxLength": 1000
              },
              "log": {
                "type": "string",
                "description": "Log of the actions taken and observations made.",
                "minLength": 1,
                "maxLength": 2000
              },
              "observation": {
                "type": "string",
                "description": "Observations made by the agent after performing the action.",
                "minLength": 1,
                "maxLength": 2000
              },
              "type": {
                "type": "string",
                "enum": [
                  "text",
                  "image",
                  "url",
                  "code",
                  "html"
                ],
                "description": "The type of message."
              }
            },
            "required": [
              "agent_name"
            ],
            "additionalProperties": false
          },
          "type": {
            "type": "string",
            "enum": [
              "text",
              "image",
              "url",
              "code",
              "html"
            ],
            "description": "The type of message."
          }
        },
        "required": [
          "message",
          "type"
        ],
        "additionalProperties": false
      },
      "minItems": 1
    }
  },
  "required": [
    "status",
    "response",
    "invocation_id"
  ],
  "if": {
    "properties": {
      "status": {
        "enum": [
          "success",
          "error"
        ]
      }
    }
  },
  "then": {
    "properties": {
      "invocation_id": {
        "type": "string"
      }
    }
  },
  "else": {
    "properties": {
      "event_id": {
        "type": "integer",
        "minimum": 0
      },
      "is_final_event": {
        "type": "boolean"
      }
    },
    "required": [
      "event_id",
      "is_final_event"
    ]
  },
  "additionalProperties": false,
  "examples": [
    {
      "status": "success",
      "invocation_id": "0fb142c2-d1da-43f7-84ad-cbd31890a1fc",
      "event_id": 0,
      "is_final_event": false,
      "response": [
        {
          "message": {
            "agent_name": "agent_langchain",
            "thought": "Jerry Cuomo is a public figure, so information about him should be available online. I will first need to look up information about him and his skills before I can create a diagram.\nAction: Google Search\nAction Input: \"Jerry Cuomo biography\""
          },
          "type": "text"
        }
      ]
    },
    {
      "status": "success",
      "invocation_id": "0fb142c2-d1da-43f7-84ad-cbd31890a1fc",
      "event_id": 1,
      "is_final_event": false,
      "response": [
        {
          "message": {
            "agent_name": "agent_langchain",
            "action": "Google Search",
            "tool_input": "Jerry Cuomo biography",
            "log": "Jerry Cuomo is a public figure, so information about him should be available online. I will first need to look up information about him and his skills before I can create a diagram.\nAction: Google Search\nAction Input: \"Jerry Cuomo biography\"",
            "observation": "Jerry Cuomo ... Gennaro \"Jerry\" Cuomo (born 1962) is an American software engineer who has worked for IBM since 1987. Holding the title of IBM Fellow, Cuomo is..."
          },
          "type": "text"
        }
      ]
    },
    {
      "status": "success",
      "invocation_id": "2d317d1f-5807-4d00-ace8-0a441c6815c9",
      "response": [
        {
          "message": "Python is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation.\nPython is dynamically typed and garbage-collected. It supports multiple programming paradigms, including structured (particularly procedural), object-oriented and functional programming. It is often described as a \"batteries included\" language due to its comprehensive standard library.\nGuido van Rossum began working on Python in the late 1980s as a successor to the ABC programming language and first released it in 1991 as Python 0.9.0. Python 2.0 was released in 2000. Python 3.0, released in 2008, was a major revision not completely backward-compatible with earlier versions. Python 2.7.18, released in 2020, was the last release of Python 2.\nPython consistently ranks as one of the most popular programming languages, and has gained widespread use in the machine learning community.\n\n\n\nSource: [Wikipedia page for Python programming](<https://en.wikipedia.org/wiki/Python_(programming_language)>)![Python programming](https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/500px-Python-logo-notext.svg.png)",
          "type": "text"
        },
        {
          "message": "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/500px-Python-logo-notext.svg.png",
          "type": "image"
        }
      ]
    }
  ]
}
