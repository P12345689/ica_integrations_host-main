# -*- coding: utf-8 -*-

# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = "3.10"

_lr_method = "LALR"

_lr_signature = "CODEBLOCK POSSIBLECODEdocument : elements\n    elements : elements element\n                | element\n    element : CODEBLOCK\n               | POSSIBLECODE\n    "

_lr_action_items = {
    "CODEBLOCK": (
        [
            0,
            2,
            3,
            4,
            5,
            6,
        ],
        [
            4,
            4,
            -3,
            -4,
            -5,
            -2,
        ],
    ),
    "POSSIBLECODE": (
        [
            0,
            2,
            3,
            4,
            5,
            6,
        ],
        [
            5,
            5,
            -3,
            -4,
            -5,
            -2,
        ],
    ),
    "$end": (
        [
            1,
            2,
            3,
            4,
            5,
            6,
        ],
        [
            0,
            -1,
            -3,
            -4,
            -5,
            -2,
        ],
    ),
}

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if _x not in _lr_action:
            _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {
    "document": (
        [
            0,
        ],
        [
            1,
        ],
    ),
    "elements": (
        [
            0,
        ],
        [
            2,
        ],
    ),
    "element": (
        [
            0,
            2,
        ],
        [
            3,
            6,
        ],
    ),
}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if _x not in _lr_goto:
            _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> document", "S'", 1, None, None, None),
    ("document -> elements", "document", 1, "p_document", "python_grammar.py", 47),
    (
        "elements -> elements element",
        "elements",
        2,
        "p_elements_codeblocks",
        "python_grammar.py",
        52,
    ),
    (
        "elements -> element",
        "elements",
        1,
        "p_elements_codeblocks",
        "python_grammar.py",
        53,
    ),
    ("element -> CODEBLOCK", "element", 1, "p_element", "python_grammar.py", 61),
    ("element -> POSSIBLECODE", "element", 1, "p_element", "python_grammar.py", 62),
]
