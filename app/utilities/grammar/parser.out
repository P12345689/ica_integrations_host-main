Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> document
Rule 1     document -> elements
Rule 2     elements -> elements element
Rule 3     elements -> element
Rule 4     element -> CODEBLOCK
Rule 5     element -> POSSIBLECODE

Terminals, with rules where they appear

CODEBLOCK            : 4
POSSIBLECODE         : 5
error                :

Nonterminals, with rules where they appear

document             : 0
element              : 2 3
elements             : 1 2

Parsing method: LALR

state 0

    (0) S' -> . document
    (1) document -> . elements
    (2) elements -> . elements element
    (3) elements -> . element
    (4) element -> . CODEBLOCK
    (5) element -> . POSSIBLECODE

    CODEBLOCK       shift and go to state 4
    POSSIBLECODE    shift and go to state 5

    document                       shift and go to state 1
    elements                       shift and go to state 2
    element                        shift and go to state 3

state 1

    (0) S' -> document .



state 2

    (1) document -> elements .
    (2) elements -> elements . element
    (4) element -> . CODEBLOCK
    (5) element -> . POSSIBLECODE

    $end            reduce using rule 1 (document -> elements .)
    CODEBLOCK       shift and go to state 4
    POSSIBLECODE    shift and go to state 5

    element                        shift and go to state 6

state 3

    (3) elements -> element .

    CODEBLOCK       reduce using rule 3 (elements -> element .)
    POSSIBLECODE    reduce using rule 3 (elements -> element .)
    $end            reduce using rule 3 (elements -> element .)


state 4

    (4) element -> CODEBLOCK .

    CODEBLOCK       reduce using rule 4 (element -> CODEBLOCK .)
    POSSIBLECODE    reduce using rule 4 (element -> CODEBLOCK .)
    $end            reduce using rule 4 (element -> CODEBLOCK .)


state 5

    (5) element -> POSSIBLECODE .

    CODEBLOCK       reduce using rule 5 (element -> POSSIBLECODE .)
    POSSIBLECODE    reduce using rule 5 (element -> POSSIBLECODE .)
    $end            reduce using rule 5 (element -> POSSIBLECODE .)


state 6

    (2) elements -> elements element .

    CODEBLOCK       reduce using rule 2 (elements -> elements element .)
    POSSIBLECODE    reduce using rule 2 (elements -> elements element .)
    $end            reduce using rule 2 (elements -> elements element .)
