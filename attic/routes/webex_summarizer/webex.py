# -*- coding: utf-8 -*-
"""
Author: Mihai Criveti
Description: Webex summary library
"""

import os
import re

import requests
from libica import ICAClient

model_id = "222"  # Mixtral
transcript_generation_prompt = "Turn the following Webex call transcript into well structured, detailed meeting minutes in markdown format, with speaker names, info, action items, an executive summary at the top. When listing participants, show them all on one line.\n\n"
legal_notice = "NOTICE: this content was generated by AI using microflow, results may vary"


def approximate_token_count(text):
    # This is a simplified approximation that splits the text at whitespace and punctuation.
    tokens = re.findall(r"\w+|[^\w\s]", text, re.UNICODE)
    return len(tokens)


def download_transcript(bearer_token, from_date, to_date, max_results):
    """
    Download the latest meeting transcript within the specified date range.

    Parameters:
    bearer_token (str): Bearer token for authentication.
    from_date (str): Start date for fetching transcripts (YYYY-MM-DD).
    to_date (str): End date for fetching transcripts (YYYY-MM-DD).
    max_results (int): Maximum number of transcripts to fetch.

    Returns:
    str: Transcript text.
    """
    url = f"https://webexapis.com/v1/meetingTranscripts?from={from_date}&to={to_date}&max={max_results}"
    headers = {"Integrations-API-Key": f"Bearer {bearer_token}"}

    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        transcripts = response.json().get("items", [])
        if transcripts:
            # Assuming we're downloading the last transcript in the list
            download_link = transcripts[-1]["txtDownloadLink"]
            transcript_response = requests.get(download_link, headers=headers)
            if transcript_response.status_code == 200:
                return transcript_response.text
            else:
                print("Failed to download the transcript.")
        else:
            print("No transcripts available.")
    else:
        print("Failed to retrieve transcripts.")

    return ""


def summarize_call(transcript):
    """
    Mockup function to process and display the call transcript.

    Parameters:
    transcript (str): Transcript text to be processed.
    """
    prompt = f"{transcript_generation_prompt}\n{transcript}"
    print(prompt)
    token_count = approximate_token_count(prompt)
    print(f"*** Estimated tokens: {token_count} ***")
    client = ICAClient()
    model_output = client.prompt_flow(model_id_or_name=model_id, prompt=prompt)
    return f"{model_output}\n{legal_notice}"


def main():
    # Replace 'your_webex_bearer_token_here' with your actual Webex bearer token.
    WEBEX_BEARER = os.getenv("WEBEX_BEARER", "your_webex_bearer_token_here")
    FROM_DATE = "2024-03-01"
    TO_DATE = "2024-03-31"
    MAX_RESULTS = 10

    transcript = download_transcript(WEBEX_BEARER, FROM_DATE, TO_DATE, MAX_RESULTS)
    if transcript:
        summarize_call(transcript)


if __name__ == "__main__":
    main()
